# Question 4: Identify all function declarations (including parameters)
echo "Question4"
grep -E '^[[:blank:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]+[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]*\([^)]*\)[[:blank:]]*{' code.c

# Question 5: Extract lines where a C++ structure is defined using awk
echo "Question5"
awk '/^struct [a-zA-Z_][a-zA-Z0-9_]* \{/,/\};/' code.c


# Question 6: Replace "marks" with "score" in the code1_2.cpp using sed
echo "Question6"
sed -e 's/\bmarks\b/score/g' code.c

# Question 7: Find lines where a function is defined with at least two arguments
echo "Question7"
grep -E '^[[:blank:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]+[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]*\([^)]*,[^)]*\)[[:blank:]]*{' code.c


# Question 8: Identify lines with preprocessor directives using grep
echo "Question8"
grep '^#' code.c

# Question 9: Using grep count the total number of lines that contain function declarations or definitions in both files.
echo "Question9"
awk '^[[:blank:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]+[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]*\([^)]*\)[[:blank:]]*{' code.c

# Question 10: Extract and list all unique function names using grep and cut
echo "Question10"
grep -Eo '^[[:blank:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]+[a-zA-Z_][a-zA-Z0-9_]*[[:blank:]]*\([^)]*\)[[:blank:]]*{' code.c | cut -d' ' -f2 | sort -u